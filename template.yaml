AWSTemplateFormatVersion: '2010-09-09'
Description: 'HIPAA-Compliant Infrastructure Template'

Parameters:
  VpcCIDR:
    Description: CIDR block for the VPC
    Type: String
    Default: 10.0.0.0/16

  SSLCertificateArn:
    Description: ARN of the SSL certificate in ACM for HTTPS
    Type: String
    
  PrivateSubnet1CIDR:
    Description: CIDR block for private subnet 1
    Type: String
    Default: 10.0.1.0/24

  PrivateSubnet2CIDR:
    Description: CIDR block for private subnet 2
    Type: String
    Default: 10.0.2.0/24
    
  PublicSubnet1CIDR:
    Description: CIDR block for public subnet 1
    Type: String
    Default: 10.0.3.0/24
    
  PublicSubnet2CIDR:
    Description: CIDR block for public subnet 2
    Type: String
    Default: 10.0.4.0/24

  KeyPairName:
    Description: Name of an existing EC2 KeyPair to enable SSH access
    Type: AWS::EC2::KeyPair::KeyName

  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t3.medium
    AllowedValues:
      - t3.medium
      - t3.large
      - m5.large

Resources:
  # VPC and Networking Components
  HIPAAVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: HIPAA-VPC

  # Internet Gateway for public subnets
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: HIPAA-IGW

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref HIPAAVpc
      InternetGatewayId: !Ref InternetGateway

  # Public Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref HIPAAVpc
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: HIPAA-Public-Subnet-1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref HIPAAVpc
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: HIPAA-Public-Subnet-2

  # Private Subnets
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref HIPAAVpc
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: HIPAA-Private-Subnet-1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref HIPAAVpc
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: HIPAA-Private-Subnet-2

  # NAT Gateway with Elastic IP for private subnets
  NatGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: HIPAA-NAT-Gateway

  # Route Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref HIPAAVpc
      Tags:
        - Key: Name
          Value: HIPAA-Public-Routes

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref HIPAAVpc
      Tags:
        - Key: Name
          Value: HIPAA-Private-Routes

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

  # Security Groups
  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for bastion host
      VpcId: !Ref HIPAAVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0 # Restrict this in production to specific IPs
      Tags:
        - Key: Name
          Value: HIPAA-Bastion-SG

  ApplicationSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for application instances
      VpcId: !Ref HIPAAVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref BastionSecurityGroup
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
      Tags:
        - Key: Name
          Value: HIPAA-App-SG

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for load balancer
      VpcId: !Ref HIPAAVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: HIPAA-LB-SG

  # KMS Key for Encryption
  HIPAAKMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: KMS key for HIPAA-compliant encryption
      KeyPolicy:
        Version: '2012-10-17'
        Id: key-default-1
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'
          - Sid: Allow CloudTrail to use the key
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action:
              - kms:GenerateDataKey*
              - kms:Decrypt
              - kms:DescribeKey
            Resource: '*'
          - Sid: Allow VPC Flow Logs to use the key
            Effect: Allow
            Principal:
              Service: delivery.logs.amazonaws.com
            Action:
              - kms:GenerateDataKey*
              - kms:Decrypt
              - kms:DescribeKey
            Resource: '*'
      EnableKeyRotation: true
      Tags:
        - Key: Name
          Value: HIPAA-KMS-Key

  HIPAAKMSKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: alias/hipaa-key
      TargetKeyId: !Ref HIPAAKMSKey

  # S3 Bucket with Encryption
  LoggingBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: !Ref HIPAAKMSKey
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: Name
          Value: HIPAA-Logging-Bucket

  # Encrypted EBS Volume
  EncryptedEBSVolume:
    Type: AWS::EC2::Volume
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Size: 100
      VolumeType: gp3
      Encrypted: true
      KmsKeyId: !Ref HIPAAKMSKey
      Tags:
        - Key: Name
          Value: HIPAA-EBS-Volume

  # CloudTrail for Auditing
  CloudTrail:
    Type: AWS::CloudTrail::Trail
    DependsOn: LoggingBucketPolicy
    Properties:
      S3BucketName: !Ref LoggingBucket
      IsLogging: true
      IsMultiRegionTrail: true
      IncludeGlobalServiceEvents: true
      EnableLogFileValidation: true
      KMSKeyId: !Ref HIPAAKMSKey
      Tags:
        - Key: Name
          Value: HIPAA-CloudTrail

  LoggingBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref LoggingBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowRootAccountFullAccess
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 's3:*'
            Resource: 
              - !Sub 'arn:aws:s3:::${LoggingBucket}'
              - !Sub 'arn:aws:s3:::${LoggingBucket}/*'
          - Sid: AWSCloudTrailAclCheck
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: s3:GetBucketAcl
            Resource: !Sub 'arn:aws:s3:::${LoggingBucket}'
          - Sid: AWSCloudTrailWrite
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: s3:PutObject
            Resource: !Sub 'arn:aws:s3:::${LoggingBucket}/AWSLogs/${AWS::AccountId}/*'
            Condition:
              StringEquals:
                s3:x-amz-acl: bucket-owner-full-control
          - Sid: AWSVPCFlowLogsWrite
            Effect: Allow
            Principal:
              Service: delivery.logs.amazonaws.com
            Action:
              - s3:PutObject
            Resource: !Sub 'arn:aws:s3:::${LoggingBucket}/*'
            Condition:
              StringEquals:
                s3:x-amz-acl: bucket-owner-full-control
          - Sid: AWSVPCFlowLogsAclCheck
            Effect: Allow
            Principal:
              Service: delivery.logs.amazonaws.com
            Action:
              - s3:GetBucketAcl
            Resource: !Sub 'arn:aws:s3:::${LoggingBucket}'
          - Sid: AWSLoadBalancerLogsWrite
            Effect: Allow
            Principal:
              Service: elasticloadbalancing.amazonaws.com
            Action:
              - s3:PutObject
            Resource: !Sub 'arn:aws:s3:::${LoggingBucket}/alb-logs/AWSLogs/${AWS::AccountId}/*'
          - Sid: AWSLoadBalancerLogsAclCheck
            Effect: Allow
            Principal:
              Service: elasticloadbalancing.amazonaws.com
            Action:
              - s3:GetBucketAcl
            Resource: !Sub 'arn:aws:s3:::${LoggingBucket}'

  # Config Rule for Monitoring
  ConfigRecorder:
    Type: AWS::Config::ConfigurationRecorder
    Properties:
      RecordingGroup:
        AllSupported: true
        IncludeGlobalResourceTypes: true
      RoleARN: !GetAtt ConfigRole.Arn

  ConfigDeliveryChannel:
    Type: AWS::Config::DeliveryChannel
    Properties:
      S3BucketName: !Ref LoggingBucket
      ConfigSnapshotDeliveryProperties:
        DeliveryFrequency: Six_Hours

  ConfigRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: config.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWS_ConfigRole
        - arn:aws:iam::aws:policy/AmazonS3FullAccess

  # HIPAA Compliant EC2 Instance in Private Subnet
  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforAWSCodeDeploy
      Path: /

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref EC2InstanceRole

  HIPAACompliantInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPairName
      SubnetId: !Ref PrivateSubnet1
      IamInstanceProfile: !Ref EC2InstanceProfile
      SecurityGroupIds:
        - !Ref ApplicationSecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 50
            VolumeType: gp3
            Encrypted: true
            KmsKeyId: !Ref HIPAAKMSKey
            DeleteOnTermination: true
      ImageId: ami-0440d3b780d96b29d # Amazon Linux 2023 - Replace with appropriate AMI for your region
      UserData:
        Fn::Base64: |
          #!/bin/bash
          # Update system
          yum update -y
          
          # Install AWS CLI and CloudWatch agent
          yum install -y amazon-cloudwatch-agent awscli
          
          # Install Node.js and npm
          curl -fsSL https://rpm.nodesource.com/setup_18.x | bash -
          yum install -y nodejs
          npm install -g npm@latest
          
          # Install CodeDeploy agent
          yum install -y ruby wget
          wget https://aws-codedeploy-us-east-1.s3.us-east-1.amazonaws.com/latest/install
          chmod +x ./install
          ./install auto
          systemctl enable codedeploy-agent
          systemctl start codedeploy-agent
          
          # Set up application directory and install dependencies
          mkdir -p /opt/rejuve-app
          cd /opt/rejuve-app
          
          # Dependencies will be installed by CodeDeploy during deployment
          
          # Set up CloudWatch agent
          cat > /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json << 'EOF'
          {
            "agent": {
              "metrics_collection_interval": 60,
              "run_as_user": "root"
            },
            "logs": {
              "logs_collected": {
                "files": {
                  "collect_list": [
                    {
                      "file_path": "/var/log/secure",
                      "log_group_name": "hipaa-security-logs",
                      "log_stream_name": "{instance_id}/secure"
                    },
                    {
                      "file_path": "/var/log/messages",
                      "log_group_name": "hipaa-system-logs",
                      "log_stream_name": "{instance_id}/messages"
                    },
                    {
                      "file_path": "/var/log/audit/audit.log",
                      "log_group_name": "hipaa-audit-logs",
                      "log_stream_name": "{instance_id}/audit"
                    }
                  ]
                }
              }
            },
            "metrics": {
              "metrics_collected": {
                "cpu": {
                  "measurement": ["cpu_usage_idle", "cpu_usage_user", "cpu_usage_system"]
                },
                "mem": {
                  "measurement": ["mem_used_percent"]
                },
                "disk": {
                  "measurement": ["disk_used_percent"],
                  "resources": ["/"]
                }
              },
              "append_dimensions": {
                "InstanceId": "${aws:InstanceId}"
              }
            }
          }
          EOF
          
          # Start CloudWatch agent
          systemctl enable amazon-cloudwatch-agent
          systemctl start amazon-cloudwatch-agent
          
          # Set up auditing
          yum install -y audit
          
          # Configure auditd rules
          cat > /etc/audit/rules.d/hipaa.rules << 'EOF'
          # HIPAA Audit Rules
          -w /etc/passwd -p wa -k identity
          -w /etc/group -p wa -k identity
          -w /etc/shadow -p wa -k identity
          -w /etc/sudoers -p wa -k identity
          -w /var/log/auth.log -p wa -k auth_logs
          -w /var/log/secure -p wa -k auth_logs
          -w /var/log/messages -p wa -k syslog
          -a always,exit -F arch=b64 -S mount -F auid>=1000 -F auid!=4294967295 -k mounts
          -a always,exit -F arch=b32 -S mount -F auid>=1000 -F auid!=4294967295 -k mounts
          EOF
          
          # Restart auditd
          service auditd restart
          
          # Setup automatic system updates
          yum install -y yum-cron
          sed -i 's/apply_updates = no/apply_updates = yes/' /etc/yum/yum-cron.conf
          systemctl enable yum-cron
          systemctl start yum-cron
          
          # Enable and configure firewalld
          yum install -y firewalld
          systemctl enable firewalld
          systemctl start firewalld
          
          # Enable SELinux
          setenforce 1
          sed -i 's/SELINUX=permissive/SELINUX=enforcing/' /etc/selinux/config
          
          # Install anti-malware
          yum install -y clamav clamav-update
          freshclam
          echo "0 2 * * * /usr/bin/freshclam --quiet" > /etc/cron.d/freshclam
          echo "0 3 * * * /usr/bin/clamscan -r / --exclude-dir=^/sys --exclude-dir=^/proc --exclude-dir=^/dev --exclude-dir=^/media --quiet --infected --log=/var/log/clamscan.log" > /etc/cron.d/clamscan
      Tags:
        - Key: Name
          Value: HIPAA-Compliant-Instance

  # Bastion Host in Public Subnet
  BastionHost:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.micro
      KeyName: !Ref KeyPairName
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet:
            - !Ref BastionSecurityGroup
          SubnetId: !Ref PublicSubnet1
      ImageId: ami-0440d3b780d96b29d # Amazon Linux 2023 - Replace with appropriate AMI for your region
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 20
            VolumeType: gp3
            Encrypted: true
            DeleteOnTermination: true
      Tags:
        - Key: Name
          Value: HIPAA-Bastion-Host

  # Application Load Balancer with HTTPS
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: hipaa-alb
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: 60
      Tags:
        - Key: Name
          Value: HIPAA-ALB

  # Target Group for Application Instance
  ApplicationTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: hipaa-application-tg
      Port: 443
      Protocol: HTTPS
      VpcId: !Ref HIPAAVpc
      HealthCheckPath: /health
      HealthCheckPort: 443
      HealthCheckProtocol: HTTPS
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      HealthCheckTimeoutSeconds: 5
      HealthCheckIntervalSeconds: 30
      TargetType: instance
      Targets:
        - Id: !Ref HIPAACompliantInstance
          Port: 443
      Tags:
        - Key: Name
          Value: HIPAA-Application-TG

  # HTTPS Listener for the ALB
  ApplicationListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ApplicationTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-TLS-1-2-2017-01
      Certificates:
        - CertificateArn: !Ref SSLCertificateArn

  # GuardDuty for threat detection
  GuardDutyDetector:
    Type: AWS::GuardDuty::Detector
    Properties:
      Enable: true
      FindingPublishingFrequency: FIFTEEN_MINUTES

  # AWS Backup vault for backup management
  BackupVault:
    Type: AWS::Backup::BackupVault
    Properties:
      BackupVaultName: HIPAABackupVault
      EncryptionKeyArn: !GetAtt HIPAAKMSKey.Arn

  # VPC Flow Logs for network monitoring
  
  FlowLogRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: vpc-flow-logs.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      Path: /

  FlowLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub 'HIPAAVPCFlowLogs-${AWS::StackName}'
      RetentionInDays: 90

  FlowLog:
    Type: AWS::EC2::FlowLog
    Properties:
      ResourceId: !Ref HIPAAVpc
      ResourceType: VPC
      TrafficType: ALL
      LogDestinationType: cloud-watch-logs
      LogGroupName: !Ref FlowLogGroup
      DeliverLogsPermissionArn: !GetAtt FlowLogRole.Arn

  # WAF Web ACL for protecting Web Applications
  WebACL:
    Type: AWS::WAFv2::WebACL
    Properties:
      Name: HIPAA-WAF-WebACL
      Scope: REGIONAL
      DefaultAction:
        Allow: {}
      VisibilityConfig:
        SampledRequestsEnabled: true
        CloudWatchMetricsEnabled: true
        MetricName: HIPAA-WAF-WebACL
      Rules:
        - Name: AWS-AWSManagedRulesBotControlRuleSet
          Priority: 0
          OverrideAction:
            None: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: AWS-AWSManagedRulesBotControlRuleSet
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesBotControlRuleSet
        - Name: AWS-AWSManagedRulesCommonRuleSet
          Priority: 1
          OverrideAction:
            None: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: AWS-AWSManagedRulesCommonRuleSet
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesCommonRuleSet
        - Name: AWS-AWSManagedRulesSQLiRuleSet
          Priority: 2
          OverrideAction:
            None: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: AWS-AWSManagedRulesSQLiRuleSet
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesSQLiRuleSet

  # SNS Topic for Alerts
  AlertTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: HIPAA-Alerts
      TopicName: HIPAA-Alerts

  # Email Subscription for Alerts
  AlertEmailSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref AlertTopic
      Protocol: email
      Endpoint: ergi@roi.ad

  # CloudWatch Alarms
  HighCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Alarm if CPU usage is high
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 80
      AlarmActions:
        - !Ref AlertTopic
      Dimensions:
        - Name: InstanceId
          Value: !Ref HIPAACompliantInstance
      ComparisonOperator: GreaterThanThreshold

  UnauthorizedAPICallsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Alarm on unauthorized API calls
      MetricName: UnauthorizedAttemptCount
      Namespace: CloudTrailMetrics
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      AlarmActions:
        - !Ref AlertTopic
      ComparisonOperator: GreaterThanOrEqualToThreshold

  # CodeDeploy Resources
  CodeDeployServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codedeploy.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole
      Path: /

  RejuveApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: rejuve-application
      ComputePlatform: Server

  RejuveDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref RejuveApplication
      ServiceRoleArn: !GetAtt CodeDeployServiceRole.Arn
      DeploymentGroupName: rejuve-deployment-group
      DeploymentConfigName: CodeDeployDefault.OneAtATime
      Ec2TagFilters:
        - Key: Name
          Type: KEY_AND_VALUE
          Value: HIPAA-Compliant-Instance

Outputs:
  VPC:
    Description: VPC ID
    Value: !Ref HIPAAVpc
    
  PrivateSubnets:
    Description: Private Subnet IDs
    Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ] ]
    
  PublicSubnets:
    Description: Public Subnet IDs
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ] ]
    
  KMSKeyARN:
    Description: KMS Key ARN
    Value: !GetAtt HIPAAKMSKey.Arn
    
  LoggingBucket:
    Description: S3 Bucket for Logs
    Value: !Ref LoggingBucket
    
  HIPAACompliantInstanceID:
    Description: HIPAA-Compliant Instance ID
    Value: !Ref HIPAACompliantInstance
    
  BastionHostPublicIP:
    Description: Bastion Host Public IP
    Value: !GetAtt BastionHost.PublicDnsName
    
  LoadBalancerDNS:
    Description: Application Load Balancer DNS Name
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    
  CodeDeployApplication:
    Description: CodeDeploy Application Name
    Value: !Ref RejuveApplication
    
  CodeDeployDeploymentGroup:
    Description: CodeDeploy Deployment Group Name
    Value: !Ref RejuveDeploymentGroup
    
  ApplicationTargetGroupName:
    Description: Application Target Group Name
    Value: !Ref ApplicationTargetGroup
    
  ApplicationListenerArn:
    Description: Application Load Balancer Listener ARN
    Value: !Ref ApplicationListener 